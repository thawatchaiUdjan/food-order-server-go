basePath: /
definitions:
  models.Food:
    properties:
      _id:
        type: string
      category_id:
        type: string
      created_at:
        type: string
      food_description:
        type: string
      food_id:
        type: string
      food_image_url:
        type: string
      food_name:
        type: string
      food_options:
        items:
          $ref: '#/definitions/models.FoodOption'
        type: array
      food_price:
        type: number
      food_price_discount:
        type: number
      permission:
        type: string
      updated_at:
        type: string
    type: object
  models.FoodDataRes:
    properties:
      food:
        $ref: '#/definitions/models.Food'
      message:
        type: string
    type: object
  models.FoodOption:
    properties:
      _id:
        type: string
      created_at:
        type: string
      option_choices:
        items:
          $ref: '#/definitions/models.OptionChoice'
        type: array
      option_description:
        type: string
      option_name:
        type: string
      option_type:
        type: string
      updated_at:
        type: string
    type: object
  models.FoodReq:
    properties:
      category_id:
        type: string
      food_description:
        type: string
      food_image_url:
        type: string
      food_name:
        type: string
      food_options:
        items:
          type: string
        type: array
      food_price:
        type: number
      food_price_discount:
        type: number
    required:
    - category_id
    - food_description
    - food_name
    - food_options
    - food_price
    - food_price_discount
    type: object
  models.LatLng:
    properties:
      lat:
        type: number
      lng:
        type: number
    type: object
  models.Location:
    properties:
      address:
        type: string
      latlng:
        $ref: '#/definitions/models.LatLng'
    type: object
  models.MessageRes:
    properties:
      message:
        type: string
    type: object
  models.OptionChoice:
    properties:
      _id:
        type: string
      choice_name:
        type: string
      choice_price:
        type: number
      created_at:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      _id:
        type: string
      balance:
        type: number
      created_at:
        type: string
      location:
        $ref: '#/definitions/models.Location'
      name:
        type: string
      password:
        type: string
      profile_image_url:
        type: string
      role:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  models.UserDataRes:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.UserLoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.UserRegisterReq:
    properties:
      name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - name
    - password
    - username
    type: object
  models.UserUpdateRes:
    properties:
      message:
        type: string
      user:
        $ref: '#/definitions/models.UserDataRes'
    type: object
host: localhost:8000
info:
  contact: {}
  title: Food Order App API
  version: 1.0.0
paths:
  /foods:
    delete:
      description: Delete a food item by ID.
      parameters:
      - description: Food ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageRes'
      security:
      - BearerAuth: []
      summary: Remove a food item
      tags:
      - Food
    get:
      description: Retrieve a list of all foods from the database
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Food'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageRes'
      security:
      - BearerAuth: []
      summary: Get all foods
      tags:
      - Food
    post:
      description: Create a new food item with the provided details.
      parameters:
      - description: Food request body
        in: body
        name: food
        required: true
        schema:
          $ref: '#/definitions/models.FoodReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FoodDataRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageRes'
      security:
      - BearerAuth: []
      summary: Create a new food item
      tags:
      - Food
    put:
      description: Modify food item details by ID.
      parameters:
      - description: Food request body
        in: body
        name: food
        required: true
        schema:
          $ref: '#/definitions/models.FoodReq'
      - description: Food ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FoodDataRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageRes'
      security:
      - BearerAuth: []
      summary: Update a food item
      tags:
      - Food
  /user:
    delete:
      description: Delete a user account by user ID.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageRes'
      security:
      - BearerAuth: []
      summary: Remove a user account
      tags:
      - User
    get:
      description: Fetch user details based on user ID.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDataRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageRes'
      security:
      - BearerAuth: []
      summary: Retrieve a user by ID
      tags:
      - User
    put:
      description: Modify existing user details by user ID.
      parameters:
      - description: User update information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserUpdateRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageRes'
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - User
  /user/login:
    post:
      description: Create a new user account with the provided details.
      parameters:
      - description: User register information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDataRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageRes'
      summary: Register a new user
      tags:
      - User
  /user/verify-token:
    get:
      description: Check the validity of the user token.
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageRes'
      security:
      - BearerAuth: []
      summary: Verify user token
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
